/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { TicketsT, TicketsTInterface } from "../../contracts/TicketsT";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ticketInitialPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_totalTickets",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_ticketContract",
        type: "address",
      },
      {
        internalType: "string[]",
        name: "_ticketsTokenUri",
        type: "string[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "recieved",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ticketId",
        type: "uint256",
      },
    ],
    name: "ticketEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "attendees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "buyTicket",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getTicketPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "soldTickets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ticketsAvailable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000eb538038062000eb58339818101604052810190620000379190620005a7565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836002819055508260018190555081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060059080519060200190620000de929190620000e9565b50505050506200069d565b8280548282559060005260206000209081019282156200013d579160200282015b828111156200013c5782518290805190602001906200012b92919062000150565b50916020019190600101906200010a565b5b5090506200014c9190620001e1565b5090565b8280546200015e9062000667565b90600052602060002090601f016020900481019282620001825760008555620001ce565b82601f106200019d57805160ff1916838001178555620001ce565b82800160010185558215620001ce579182015b82811115620001cd578251825591602001919060010190620001b0565b5b509050620001dd919062000209565b5090565b5b80821115620002055760008181620001fb919062000228565b50600101620001e2565b5090565b5b80821115620002245760008160009055506001016200020a565b5090565b508054620002369062000667565b6000825580601f106200024a57506200026b565b601f0160209004906000526020600020908101906200026a919062000209565b5b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620002978162000282565b8114620002a357600080fd5b50565b600081519050620002b7816200028c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002ea82620002bd565b9050919050565b620002fc81620002dd565b81146200030857600080fd5b50565b6000815190506200031c81620002f1565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003728262000327565b810181811067ffffffffffffffff8211171562000394576200039362000338565b5b80604052505050565b6000620003a96200026e565b9050620003b7828262000367565b919050565b600067ffffffffffffffff821115620003da57620003d962000338565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff82111562000413576200041262000338565b5b6200041e8262000327565b9050602081019050919050565b60005b838110156200044b5780820151818401526020810190506200042e565b838111156200045b576000848401525b50505050565b6000620004786200047284620003f5565b6200039d565b905082815260208101848484011115620004975762000496620003f0565b5b620004a48482856200042b565b509392505050565b600082601f830112620004c457620004c362000322565b5b8151620004d684826020860162000461565b91505092915050565b6000620004f6620004f084620003bc565b6200039d565b905080838252602082019050602084028301858111156200051c576200051b620003eb565b5b835b818110156200056a57805167ffffffffffffffff81111562000545576200054462000322565b5b808601620005548982620004ac565b855260208501945050506020810190506200051e565b5050509392505050565b600082601f8301126200058c576200058b62000322565b5b81516200059e848260208601620004df565b91505092915050565b60008060008060808587031215620005c457620005c362000278565b5b6000620005d487828801620002a6565b9450506020620005e787828801620002a6565b9350506040620005fa878288016200030b565b925050606085015167ffffffffffffffff8111156200061e576200061d6200027d565b5b6200062c8782880162000574565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200068057607f821691505b6020821081141562000697576200069662000638565b5b50919050565b61080880620006ad6000396000f3fe6080604052600436106100555760003560e01c8063182532341461005a578063396dc8541461008557806387bb7ae0146100c25780638da5cb5b146100ed578063a31aa84b14610118578063edca914c14610143575b600080fd5b34801561006657600080fd5b5061006f61014d565b60405161007c91906103ae565b60405180910390f35b34801561009157600080fd5b506100ac60048036038101906100a7919061042c565b610164565b6040516100b991906103ae565b60405180910390f35b3480156100ce57600080fd5b506100d761017c565b6040516100e491906103ae565b60405180910390f35b3480156100f957600080fd5b50610102610186565b60405161010f919061047a565b60405180910390f35b34801561012457600080fd5b5061012d6101aa565b60405161013a91906103ae565b60405180910390f35b61014b6101b0565b005b600060035460015461015f91906104c4565b905090565b60046020528060005260406000206000915090505481565b6000600254905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6002543410156101f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610555565b60405180910390fd5b60006101ff61014d565b1161023f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610236906105c1565b60405180910390fd5b600160035461024e91906105e1565b600381905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166303543fea33600354600560016003546102a791906104c4565b815481106102b8576102b7610637565b5b906000526020600020016040518463ffffffff1660e01b81526004016102e09392919061076b565b600060405180830381600087803b1580156102fa57600080fd5b505af115801561030e573d6000803e3d6000fd5b50505050600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fe87c71c384b3fcb26744a2bd98998ed1e229eb1f791bc41918c8636f26d8ad143460035460405161038b9291906107a9565b60405180910390a1565b6000819050919050565b6103a881610395565b82525050565b60006020820190506103c3600083018461039f565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103f9826103ce565b9050919050565b610409816103ee565b811461041457600080fd5b50565b60008135905061042681610400565b92915050565b600060208284031215610442576104416103c9565b5b600061045084828501610417565b91505092915050565b6000610464826103ce565b9050919050565b61047481610459565b82525050565b600060208201905061048f600083018461046b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006104cf82610395565b91506104da83610395565b9250828210156104ed576104ec610495565b5b828203905092915050565b600082825260208201905092915050565b7f6c6f776572207468616e2063757272656e742070726963650000000000000000600082015250565b600061053f6018836104f8565b915061054a82610509565b602082019050919050565b6000602082019050818103600083015261056e81610532565b9050919050565b7f736f6c64206f7574000000000000000000000000000000000000000000000000600082015250565b60006105ab6008836104f8565b91506105b682610575565b602082019050919050565b600060208201905081810360008301526105da8161059e565b9050919050565b60006105ec82610395565b91506105f783610395565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561062c5761062b610495565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61066f816103ee565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106bc57607f821691505b602082108114156106d0576106cf610675565b5b50919050565b60008190508160005260206000209050919050565b600081546106f8816106a4565b61070281866104f8565b9450600182166000811461071d576001811461072f57610762565b60ff1983168652602086019350610762565b610738856106d6565b60005b8381101561075a5781548189015260018201915060208101905061073b565b808801955050505b50505092915050565b60006060820190506107806000830186610666565b61078d602083018561039f565b818103604083015261079f81846106eb565b9050949350505050565b60006040820190506107be600083018561039f565b6107cb602083018461039f565b939250505056fea2646970667358221220e8eeb2666564d82bc6ea5edd30a7699ecc1a71298b07837d6be7e660d4892d6164736f6c63430008090033";

type TicketsTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TicketsTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TicketsT__factory extends ContractFactory {
  constructor(...args: TicketsTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ticketInitialPrice: PromiseOrValue<BigNumberish>,
    _totalTickets: PromiseOrValue<BigNumberish>,
    _ticketContract: PromiseOrValue<string>,
    _ticketsTokenUri: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TicketsT> {
    return super.deploy(
      _ticketInitialPrice,
      _totalTickets,
      _ticketContract,
      _ticketsTokenUri,
      overrides || {}
    ) as Promise<TicketsT>;
  }
  override getDeployTransaction(
    _ticketInitialPrice: PromiseOrValue<BigNumberish>,
    _totalTickets: PromiseOrValue<BigNumberish>,
    _ticketContract: PromiseOrValue<string>,
    _ticketsTokenUri: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _ticketInitialPrice,
      _totalTickets,
      _ticketContract,
      _ticketsTokenUri,
      overrides || {}
    );
  }
  override attach(address: string): TicketsT {
    return super.attach(address) as TicketsT;
  }
  override connect(signer: Signer): TicketsT__factory {
    return super.connect(signer) as TicketsT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TicketsTInterface {
    return new utils.Interface(_abi) as TicketsTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TicketsT {
    return new Contract(address, _abi, signerOrProvider) as TicketsT;
  }
}
