/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
  BigNumberish,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { TicketsT, TicketsTInterface } from "../../contracts/TicketsT";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ticketInitialPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_totalTickets",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_ticketContract",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "recieved",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ticketId",
        type: "uint256",
      },
    ],
    name: "ticketEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "attendees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "buyTicket",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getTicketPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "soldTickets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ticketsAvailable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260405161089138038061089183398181016040528101906100259190610155565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826002819055508160018190555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506101a8565b600080fd5b6000819050919050565b6100d4816100c1565b81146100df57600080fd5b50565b6000815190506100f1816100cb565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610122826100f7565b9050919050565b61013281610117565b811461013d57600080fd5b50565b60008151905061014f81610129565b92915050565b60008060006060848603121561016e5761016d6100bc565b5b600061017c868287016100e2565b935050602061018d868287016100e2565b925050604061019e86828701610140565b9150509250925092565b6106da806101b76000396000f3fe6080604052600436106100555760003560e01c8063182532341461005a578063396dc8541461008557806387bb7ae0146100c25780638da5cb5b146100ed578063a31aa84b14610118578063edca914c14610143575b600080fd5b34801561006657600080fd5b5061006f61014d565b60405161007c9190610381565b60405180910390f35b34801561009157600080fd5b506100ac60048036038101906100a791906103ff565b610164565b6040516100b99190610381565b60405180910390f35b3480156100ce57600080fd5b506100d761017c565b6040516100e49190610381565b60405180910390f35b3480156100f957600080fd5b50610102610186565b60405161010f919061044d565b60405180910390f35b34801561012457600080fd5b5061012d6101aa565b60405161013a9190610381565b60405180910390f35b61014b6101b0565b005b600060035460015461015f9190610497565b905090565b60046020528060005260406000206000915090505481565b6000600254905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6002543410156101f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610528565b60405180910390fd5b60006101ff61014d565b1161023f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023690610594565b60405180910390fd5b600160035461024e91906105b4565b600381905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166303543fea336003546040518363ffffffff1660e01b81526004016102b392919061063f565b600060405180830381600087803b1580156102cd57600080fd5b505af11580156102e1573d6000803e3d6000fd5b50505050600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fe87c71c384b3fcb26744a2bd98998ed1e229eb1f791bc41918c8636f26d8ad143460035460405161035e92919061067b565b60405180910390a1565b6000819050919050565b61037b81610368565b82525050565b60006020820190506103966000830184610372565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103cc826103a1565b9050919050565b6103dc816103c1565b81146103e757600080fd5b50565b6000813590506103f9816103d3565b92915050565b6000602082840312156104155761041461039c565b5b6000610423848285016103ea565b91505092915050565b6000610437826103a1565b9050919050565b6104478161042c565b82525050565b6000602082019050610462600083018461043e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006104a282610368565b91506104ad83610368565b9250828210156104c0576104bf610468565b5b828203905092915050565b600082825260208201905092915050565b7f6c6f776572207468616e2063757272656e742070726963650000000000000000600082015250565b60006105126018836104cb565b915061051d826104dc565b602082019050919050565b6000602082019050818103600083015261054181610505565b9050919050565b7f736f6c64206f7574000000000000000000000000000000000000000000000000600082015250565b600061057e6008836104cb565b915061058982610548565b602082019050919050565b600060208201905081810360008301526105ad81610571565b9050919050565b60006105bf82610368565b91506105ca83610368565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156105ff576105fe610468565b5b828201905092915050565b610613816103c1565b82525050565b50565b60006106296000836104cb565b915061063482610619565b600082019050919050565b6000606082019050610654600083018561060a565b6106616020830184610372565b81810360408301526106728161061c565b90509392505050565b60006040820190506106906000830185610372565b61069d6020830184610372565b939250505056fea26469706673582212206cbb422eed184ccac6defb647e28a3dd31667ee7ad9e3441d9589b106e213b1364736f6c63430008090033";

type TicketsTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TicketsTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TicketsT__factory extends ContractFactory {
  constructor(...args: TicketsTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ticketInitialPrice: PromiseOrValue<BigNumberish>,
    _totalTickets: PromiseOrValue<BigNumberish>,
    _ticketContract: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<TicketsT> {
    return super.deploy(
      _ticketInitialPrice,
      _totalTickets,
      _ticketContract,
      overrides || {}
    ) as Promise<TicketsT>;
  }
  override getDeployTransaction(
    _ticketInitialPrice: PromiseOrValue<BigNumberish>,
    _totalTickets: PromiseOrValue<BigNumberish>,
    _ticketContract: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _ticketInitialPrice,
      _totalTickets,
      _ticketContract,
      overrides || {}
    );
  }
  override attach(address: string): TicketsT {
    return super.attach(address) as TicketsT;
  }
  override connect(signer: Signer): TicketsT__factory {
    return super.connect(signer) as TicketsT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TicketsTInterface {
    return new utils.Interface(_abi) as TicketsTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TicketsT {
    return new Contract(address, _abi, signerOrProvider) as TicketsT;
  }
}
