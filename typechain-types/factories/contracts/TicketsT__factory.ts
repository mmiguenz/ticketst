/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { TicketsT, TicketsTInterface } from "../../contracts/TicketsT";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ticketInitialPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_totalTickets",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_ticketContract",
        type: "address",
      },
      {
        internalType: "string[]",
        name: "_ticketsTokenUri",
        type: "string[]",
      },
      {
        internalType: "contract IERC20",
        name: "_eventToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newPrice",
        type: "uint256",
      },
    ],
    name: "priceChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "recieved",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ticketId",
        type: "uint256",
      },
    ],
    name: "ticketEvent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokensRewarded",
        type: "uint256",
      },
    ],
    name: "tokensRewarded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "attendees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "buyTicket",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getTicketPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "soldTickets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ticketsAvailable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001559380380620015598339818101604052810190620000379190620006da565b620000576200004b6200010b60201b60201c565b6200011360201b60201c565b846002819055508360018190555082600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160059080519060200190620000be929190620001d7565b5080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050620007e6565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280548282559060005260206000209081019282156200022b579160200282015b828111156200022a578251829080519060200190620002199291906200023e565b5091602001919060010190620001f8565b5b5090506200023a9190620002cf565b5090565b8280546200024c90620007b0565b90600052602060002090601f016020900481019282620002705760008555620002bc565b82601f106200028b57805160ff1916838001178555620002bc565b82800160010185558215620002bc579182015b82811115620002bb5782518255916020019190600101906200029e565b5b509050620002cb9190620002f7565b5090565b5b80821115620002f35760008181620002e9919062000316565b50600101620002d0565b5090565b5b8082111562000312576000816000905550600101620002f8565b5090565b5080546200032490620007b0565b6000825580601f1062000338575062000359565b601f016020900490600052602060002090810190620003589190620002f7565b5b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620003858162000370565b81146200039157600080fd5b50565b600081519050620003a5816200037a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003d882620003ab565b9050919050565b620003ea81620003cb565b8114620003f657600080fd5b50565b6000815190506200040a81620003df565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620004608262000415565b810181811067ffffffffffffffff8211171562000482576200048162000426565b5b80604052505050565b6000620004976200035c565b9050620004a5828262000455565b919050565b600067ffffffffffffffff821115620004c857620004c762000426565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff82111562000501576200050062000426565b5b6200050c8262000415565b9050602081019050919050565b60005b83811015620005395780820151818401526020810190506200051c565b8381111562000549576000848401525b50505050565b6000620005666200056084620004e3565b6200048b565b905082815260208101848484011115620005855762000584620004de565b5b6200059284828562000519565b509392505050565b600082601f830112620005b257620005b162000410565b5b8151620005c48482602086016200054f565b91505092915050565b6000620005e4620005de84620004aa565b6200048b565b905080838252602082019050602084028301858111156200060a5762000609620004d9565b5b835b818110156200065857805167ffffffffffffffff81111562000633576200063262000410565b5b8086016200064289826200059a565b855260208501945050506020810190506200060c565b5050509392505050565b600082601f8301126200067a576200067962000410565b5b81516200068c848260208601620005cd565b91505092915050565b6000620006a282620003cb565b9050919050565b620006b48162000695565b8114620006c057600080fd5b50565b600081519050620006d481620006a9565b92915050565b600080600080600060a08688031215620006f957620006f862000366565b5b6000620007098882890162000394565b95505060206200071c8882890162000394565b94505060406200072f88828901620003f9565b935050606086015167ffffffffffffffff8111156200075357620007526200036b565b5b620007618882890162000662565b92505060806200077488828901620006c3565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620007c957607f821691505b60208210811415620007e057620007df62000781565b5b50919050565b610d6380620007f66000396000f3fe60806040526004361061007b5760003560e01c80638da5cb5b1161004e5780638da5cb5b1461012a578063a31aa84b14610155578063edca914c14610180578063f2fde38b1461018a5761007b565b80631825323414610080578063396dc854146100ab578063715018a6146100e857806387bb7ae0146100ff575b600080fd5b34801561008c57600080fd5b506100956101b3565b6040516100a2919061073e565b60405180910390f35b3480156100b757600080fd5b506100d260048036038101906100cd91906107bc565b6101ca565b6040516100df919061073e565b60405180910390f35b3480156100f457600080fd5b506100fd6101e2565b005b34801561010b57600080fd5b506101146101f6565b604051610121919061073e565b60405180910390f35b34801561013657600080fd5b5061013f610200565b60405161014c91906107f8565b60405180910390f35b34801561016157600080fd5b5061016a610229565b604051610177919061073e565b60405180910390f35b61018861022f565b005b34801561019657600080fd5b506101b160048036038101906101ac91906107bc565b610557565b005b60006003546001546101c59190610842565b905090565b60046020528060005260406000206000915090505481565b6101ea6105db565b6101f46000610659565b565b6000600254905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60035481565b600254341015610274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026b906108d3565b60405180910390fd5b600061027e6101b3565b116102be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b59061093f565b60405180910390fd5b60016003546102cd919061095f565b6003819055506002543411156103c757600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600a6040518363ffffffff1660e01b815260040161033b9291906109fa565b602060405180830381600087803b15801561035557600080fd5b505af1158015610369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038d9190610a5b565b507f82d11f21533e141b3567ea640eff1d71eb7b1195850c80354f6c53c24ed9d7f3600a6040516103be9190610a88565b60405180910390a15b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166303543fea336003546005600160035461041a9190610842565b8154811061042b5761042a610aa3565b5b906000526020600020016040518463ffffffff1660e01b815260040161045393929190610bc8565b600060405180830381600087803b15801561046d57600080fd5b505af1158015610481573d6000803e3d6000fd5b50505050600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002546002546104db919061095f565b6002819055507ff5fdf7223faf019b846dd0f35f25876f2b97118d4f6e9d6787ea6d85a55c2143600254604051610512919061073e565b60405180910390a17fe87c71c384b3fcb26744a2bd98998ed1e229eb1f791bc41918c8636f26d8ad143460035460405161054d929190610c06565b60405180910390a1565b61055f6105db565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c690610ca1565b60405180910390fd5b6105d881610659565b50565b6105e361071d565b73ffffffffffffffffffffffffffffffffffffffff16610601610200565b73ffffffffffffffffffffffffffffffffffffffff1614610657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064e90610d0d565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000819050919050565b61073881610725565b82525050565b6000602082019050610753600083018461072f565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107898261075e565b9050919050565b6107998161077e565b81146107a457600080fd5b50565b6000813590506107b681610790565b92915050565b6000602082840312156107d2576107d1610759565b5b60006107e0848285016107a7565b91505092915050565b6107f28161077e565b82525050565b600060208201905061080d60008301846107e9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061084d82610725565b915061085883610725565b92508282101561086b5761086a610813565b5b828203905092915050565b600082825260208201905092915050565b7f6c6f776572207468616e2063757272656e742070726963650000000000000000600082015250565b60006108bd601883610876565b91506108c882610887565b602082019050919050565b600060208201905081810360008301526108ec816108b0565b9050919050565b7f736f6c64206f7574000000000000000000000000000000000000000000000000600082015250565b6000610929600883610876565b9150610934826108f3565b602082019050919050565b600060208201905081810360008301526109588161091c565b9050919050565b600061096a82610725565b915061097583610725565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156109aa576109a9610813565b5b828201905092915050565b6000819050919050565b6000819050919050565b60006109e46109df6109da846109b5565b6109bf565b610725565b9050919050565b6109f4816109c9565b82525050565b6000604082019050610a0f60008301856107e9565b610a1c60208301846109eb565b9392505050565b60008115159050919050565b610a3881610a23565b8114610a4357600080fd5b50565b600081519050610a5581610a2f565b92915050565b600060208284031215610a7157610a70610759565b5b6000610a7f84828501610a46565b91505092915050565b6000602082019050610a9d60008301846109eb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b1957607f821691505b60208210811415610b2d57610b2c610ad2565b5b50919050565b60008190508160005260206000209050919050565b60008154610b5581610b01565b610b5f8186610876565b94506001821660008114610b7a5760018114610b8c57610bbf565b60ff1983168652602086019350610bbf565b610b9585610b33565b60005b83811015610bb757815481890152600182019150602081019050610b98565b808801955050505b50505092915050565b6000606082019050610bdd60008301866107e9565b610bea602083018561072f565b8181036040830152610bfc8184610b48565b9050949350505050565b6000604082019050610c1b600083018561072f565b610c28602083018461072f565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c8b602683610876565b9150610c9682610c2f565b604082019050919050565b60006020820190508181036000830152610cba81610c7e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610cf7602083610876565b9150610d0282610cc1565b602082019050919050565b60006020820190508181036000830152610d2681610cea565b905091905056fea26469706673582212207a291207d724375e70f3dc6f5e32c319e98e0eb649bf9ae1f3db044a5e6b288764736f6c63430008090033";

type TicketsTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TicketsTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TicketsT__factory extends ContractFactory {
  constructor(...args: TicketsTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ticketInitialPrice: PromiseOrValue<BigNumberish>,
    _totalTickets: PromiseOrValue<BigNumberish>,
    _ticketContract: PromiseOrValue<string>,
    _ticketsTokenUri: PromiseOrValue<string>[],
    _eventToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TicketsT> {
    return super.deploy(
      _ticketInitialPrice,
      _totalTickets,
      _ticketContract,
      _ticketsTokenUri,
      _eventToken,
      overrides || {}
    ) as Promise<TicketsT>;
  }
  override getDeployTransaction(
    _ticketInitialPrice: PromiseOrValue<BigNumberish>,
    _totalTickets: PromiseOrValue<BigNumberish>,
    _ticketContract: PromiseOrValue<string>,
    _ticketsTokenUri: PromiseOrValue<string>[],
    _eventToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _ticketInitialPrice,
      _totalTickets,
      _ticketContract,
      _ticketsTokenUri,
      _eventToken,
      overrides || {}
    );
  }
  override attach(address: string): TicketsT {
    return super.attach(address) as TicketsT;
  }
  override connect(signer: Signer): TicketsT__factory {
    return super.connect(signer) as TicketsT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TicketsTInterface {
    return new utils.Interface(_abi) as TicketsTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TicketsT {
    return new Contract(address, _abi, signerOrProvider) as TicketsT;
  }
}
