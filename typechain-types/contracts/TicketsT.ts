/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface TicketsTInterface extends utils.Interface {
  functions: {
    "attendees(address)": FunctionFragment;
    "buyTicket()": FunctionFragment;
    "getTicketPrice()": FunctionFragment;
    "owner()": FunctionFragment;
    "soldTickets()": FunctionFragment;
    "ticketsAvailable()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "attendees"
      | "buyTicket"
      | "getTicketPrice"
      | "owner"
      | "soldTickets"
      | "ticketsAvailable"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "attendees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "buyTicket", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTicketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "soldTickets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketsAvailable",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "attendees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTicketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "soldTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketsAvailable",
    data: BytesLike
  ): Result;

  events: {
    "ticketEvent(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ticketEvent"): EventFragment;
}

export interface ticketEventEventObject {
  recieved: BigNumber;
  ticketId: BigNumber;
}
export type ticketEventEvent = TypedEvent<
  [BigNumber, BigNumber],
  ticketEventEventObject
>;

export type ticketEventEventFilter = TypedEventFilter<ticketEventEvent>;

export interface TicketsT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TicketsTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    attendees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyTicket(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTicketPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    soldTickets(overrides?: CallOverrides): Promise<[BigNumber]>;

    ticketsAvailable(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  attendees(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyTicket(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTicketPrice(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  soldTickets(overrides?: CallOverrides): Promise<BigNumber>;

  ticketsAvailable(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    attendees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTicket(overrides?: CallOverrides): Promise<void>;

    getTicketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    soldTickets(overrides?: CallOverrides): Promise<BigNumber>;

    ticketsAvailable(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ticketEvent(uint256,uint256)"(
      recieved?: null,
      ticketId?: null
    ): ticketEventEventFilter;
    ticketEvent(recieved?: null, ticketId?: null): ticketEventEventFilter;
  };

  estimateGas: {
    attendees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTicket(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTicketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    soldTickets(overrides?: CallOverrides): Promise<BigNumber>;

    ticketsAvailable(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    attendees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTicket(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTicketPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    soldTickets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketsAvailable(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
